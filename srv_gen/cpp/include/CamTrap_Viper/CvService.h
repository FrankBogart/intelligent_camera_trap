/* Auto-generated by genmsg_cpp for file /home/viki/groovy_workspace/CamTrap_Viper/srv/CvService.srv */
#ifndef CAMTRAP_VIPER_SERVICE_CVSERVICE_H
#define CAMTRAP_VIPER_SERVICE_CVSERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace CamTrap_Viper
{
template <class ContainerAllocator>
struct CvServiceRequest_ {
  typedef CvServiceRequest_<ContainerAllocator> Type;

  CvServiceRequest_()
  : localization_request(0)
  {
  }

  CvServiceRequest_(const ContainerAllocator& _alloc)
  : localization_request(0)
  {
  }

  typedef int32_t _localization_request_type;
  int32_t localization_request;


  typedef boost::shared_ptr< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CvServiceRequest
typedef  ::CamTrap_Viper::CvServiceRequest_<std::allocator<void> > CvServiceRequest;

typedef boost::shared_ptr< ::CamTrap_Viper::CvServiceRequest> CvServiceRequestPtr;
typedef boost::shared_ptr< ::CamTrap_Viper::CvServiceRequest const> CvServiceRequestConstPtr;


template <class ContainerAllocator>
struct CvServiceResponse_ {
  typedef CvServiceResponse_<ContainerAllocator> Type;

  CvServiceResponse_()
  : localization()
  {
    localization.assign(0);
  }

  CvServiceResponse_(const ContainerAllocator& _alloc)
  : localization()
  {
    localization.assign(0);
  }

  typedef boost::array<int32_t, 1>  _localization_type;
  boost::array<int32_t, 1>  localization;


  typedef boost::shared_ptr< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CvServiceResponse
typedef  ::CamTrap_Viper::CvServiceResponse_<std::allocator<void> > CvServiceResponse;

typedef boost::shared_ptr< ::CamTrap_Viper::CvServiceResponse> CvServiceResponsePtr;
typedef boost::shared_ptr< ::CamTrap_Viper::CvServiceResponse const> CvServiceResponseConstPtr;

struct CvService
{

typedef CvServiceRequest Request;
typedef CvServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct CvService
} // namespace CamTrap_Viper

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fa787b34b2cdca0b9b49454a95e1f0ca";
  }

  static const char* value(const  ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfa787b34b2cdca0bULL;
  static const uint64_t static_value2 = 0x9b49454a95e1f0caULL;
};

template<class ContainerAllocator>
struct DataType< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CamTrap_Viper/CvServiceRequest";
  }

  static const char* value(const  ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 localization_request\n\
\n\
";
  }

  static const char* value(const  ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc4124d8c0f1e37e69dcd90935f854ed";
  }

  static const char* value(const  ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcc4124d8c0f1e37eULL;
  static const uint64_t static_value2 = 0x69dcd90935f854edULL;
};

template<class ContainerAllocator>
struct DataType< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CamTrap_Viper/CvServiceResponse";
  }

  static const char* value(const  ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32[1] localization\n\
\n\
\n\
";
  }

  static const char* value(const  ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CamTrap_Viper::CvServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.localization_request);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CvServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CamTrap_Viper::CvServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.localization);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CvServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<CamTrap_Viper::CvService> {
  static const char* value() 
  {
    return "3807b278e4b5393dac7f26280a559c3a";
  }

  static const char* value(const CamTrap_Viper::CvService&) { return value(); } 
};

template<>
struct DataType<CamTrap_Viper::CvService> {
  static const char* value() 
  {
    return "CamTrap_Viper/CvService";
  }

  static const char* value(const CamTrap_Viper::CvService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CamTrap_Viper::CvServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3807b278e4b5393dac7f26280a559c3a";
  }

  static const char* value(const CamTrap_Viper::CvServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CamTrap_Viper::CvServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CamTrap_Viper/CvService";
  }

  static const char* value(const CamTrap_Viper::CvServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CamTrap_Viper::CvServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3807b278e4b5393dac7f26280a559c3a";
  }

  static const char* value(const CamTrap_Viper::CvServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CamTrap_Viper::CvServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CamTrap_Viper/CvService";
  }

  static const char* value(const CamTrap_Viper::CvServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CAMTRAP_VIPER_SERVICE_CVSERVICE_H

